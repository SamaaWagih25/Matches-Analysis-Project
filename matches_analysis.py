# -*- coding: utf-8 -*-
"""Matches Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rR7NsTxmcrClBUIrwGor4OVWGNeGQn_0
"""

#Samaa Wagih
#Analyzing a .csv file by importing libraries
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns

#Storing the .csv file in an object called ipl
#pd for pandas
ipl=pd.read_csv('matches.csv')

#Getting a glance on the head of the dataframe (head gets the first 5 rows)
#head method returns the first 5 records (if number no specified)
ipl.head()

#Returning the first 8 records as it was specified
ipl.head(8)

#To get the number of Rows and Columns in the dataset (R,C) by the shape method
#Output: 756 rows and 18 columns
ipl.shape

#Knowing which player won the most "Player Of Match" title
#Using the .value_counts() method and passing the Column name
ipl['player_of_match'].value_counts()

#Top 10 most frequent values
#Displaying the top 10 players with "Man Of Match" title
#Extracts from index 0 to 9 thus displaying the top 10 players
ipl['player_of_match'].value_counts()[0:10]

#Getting the top 5 players with "Man Of Match" title
#Categorical Values VS numerical values
ipl['player_of_match'].value_counts()[0:5]

#Using the .keys() method which gets the keys (dictionary)
#.keys()
#Player names in a "list"
list(ipl['player_of_match'].value_counts()[0:5].keys())

ipl['player_of_match'].value_counts()[0:10].keys()

#Bar plot 1
#Creating a bar-plot for the top 5 players

#Setting the dimensions of the plot
plt.figure(figsize=(10,5)) #setting a figure size

#The names of the players will be shown on the X-axis using .keys() method
plt.bar(list(ipl['player_of_match'].value_counts()[0:5].keys()), list(ipl['player_of_match'].value_counts()[0:5]),color = "b")
plt.title("Player Of The Match")
plt.xlabel("Names Of Players")
plt.ylabel("Number Of Times")
#Showing the bar plot
plt.show()

#ipl=pd.read_csv('matches.csv')
#ipl is the name of the dataframe or the file is stored in an object called ipl

ipl['result'].value_counts() #Counting the frequency of each key under Result

#Counting the number of toss-winners of each team
ipl['toss_winner'].value_counts()

#Result: Mumbai Indians team won the toss 98 times

# !=0 condition where runs > 0
#Selecting rows from the ipl dataframe where the 'win_by_runs' columns != 0
won_batting =ipl[ipl['win_by_runs']!=0]

#A glance on the top 5 records
won_batting.head()

#Histogram
#Distribution of win_by_runs (numerical values)
#Creating a histogram
plt.figure(figsize=(10,10))
plt.hist(won_batting['win_by_runs'], color = 'orange')
plt.title("Distribution of Winning by Runs")

#Adding X and Y labels
plt.xlabel('Win by Runs')
plt.ylabel('Frequency')
plt.show()
#Further explanation: About 2 to 3 matches where the teams won by more than 120 runs

#Extracting the number_of_wins of each team after batting first
won_batting['winner'].value_counts()

#Output: Mumbai indians won 57 times

#Bar plot 2
#Creating a bar plot for the top 3 teams who won
#Different color for each team by adding the colors in a list
plt.figure(figsize=(7,13))
plt.bar(list(won_batting['winner'].value_counts()[0:3].keys()), list(won_batting['winner'].value_counts()[0:3]), color = ['cyan', 'black', 'pink'])
plt.title('Top 3 Teams Who Won')
plt.xlabel('Teams')
plt.ylabel('Number Of Times')


plt.show()

#Creating a Pie Chart for the distribution of wins
#Parameter 1: Numerical and Parameter 2: Categorical
#The parameter autopct='%0.1f%%' is used to format the percentages in a pie chart
plt.figure(figsize=(9,45))
plt.pie(list(won_batting['winner'].value_counts()),labels=list(won_batting['winner'].value_counts().keys()),autopct='%0.1f%%' )
plt.show()

#Creating the same pie chart but the PERCENTAGES removed
plt.figure(figsize=(9,45))
plt.pie(list(won_batting['winner'].value_counts()),labels=list(won_batting['winner'].value_counts().keys()))
plt.show()

ipl.describe()

ipl.groupby('toss_winner')

ipl.isnull()